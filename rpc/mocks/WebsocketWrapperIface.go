// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// WebsocketWrapperIface is an autogenerated mock type for the WebsocketWrapperIface type
type WebsocketWrapperIface struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *WebsocketWrapperIface) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadMessage provides a mock function with given fields:
func (_m *WebsocketWrapperIface) ReadMessage() (int, []byte, error) {
	ret := _m.Called()

	var r0 int
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func() (int, []byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() []byte); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// WriteMessage provides a mock function with given fields: _a0, _a1
func (_m *WebsocketWrapperIface) WriteMessage(_a0 int, _a1 []byte) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, []byte) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWebsocketWrapperIface creates a new instance of WebsocketWrapperIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWebsocketWrapperIface(t interface {
	mock.TestingT
	Cleanup(func())
}) *WebsocketWrapperIface {
	mock := &WebsocketWrapperIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
