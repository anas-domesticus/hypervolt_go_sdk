// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// AdoptedCharger defines model for AdoptedCharger.
type AdoptedCharger struct {
	ChargerId *int64     `json:"charger_id,omitempty"`
	Created   *time.Time `json:"created,omitempty"`
}

// AdoptedChargers defines model for AdoptedChargers.
type AdoptedChargers struct {
	Chargers *[]AdoptedCharger `json:"chargers,omitempty"`
}

// Brightness defines model for Brightness.
type Brightness struct {
	Brightness float32 `json:"brightness"`
}

// Currencies defines model for Currencies.
type Currencies = []Currency

// Currency defines model for Currency.
type Currency struct {
	Code   *string `json:"code,omitempty"`
	Name   *string `json:"name,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
}

// OpenSchedule defines model for OpenSchedule.
type OpenSchedule struct {
	Type *string `json:"type,omitempty"`
}

// Placements defines model for Placements.
type Placements struct {
	// ActiveEnergyProvider Currently active energy provider integration, e.g 'OVO'
	ActiveEnergyProvider *string `json:"active_energy_provider,omitempty"`
	ChargerId            *int64  `json:"charger_id,omitempty"`
	Currency             string  `json:"currency"`

	// Id Placement ID
	Id string `json:"id"`
	Tz string `json:"tz"`
}

// RestrictedSchedule defines model for RestrictedSchedule.
type RestrictedSchedule struct {
	Intervals *[]ScheduleInterval `json:"intervals,omitempty"`
	Type      *string             `json:"type,omitempty"`
	Tz        *string             `json:"tz,omitempty"`
}

// Schedule defines model for Schedule.
type Schedule struct {
	union json.RawMessage
}

// ScheduleInterval defines model for ScheduleInterval.
type ScheduleInterval = []ScheduleLocalTime

// ScheduleLocalTime defines model for ScheduleLocalTime.
type ScheduleLocalTime struct {
	Hours   *int32 `json:"hours,omitempty"`
	Minutes *int32 `json:"minutes,omitempty"`
	Seconds *int32 `json:"seconds,omitempty"`
}

// Tariff defines model for Tariff.
type Tariff struct {
	// Interval List of tariff intervals
	Interval []TariffInterval `json:"interval"`
}

// TariffInterval defines model for TariffInterval.
type TariffInterval struct {
	// Rate Rate in GBP
	Rate float32 `json:"rate"`

	// Start Start of the tariff interval, stops whenever another interval is encountered or end of day
	Start string `json:"start"`
}

// TimelinePage defines model for TimelinePage.
type TimelinePage struct {
	Data *[]TimelinePoint `json:"data,omitempty"`
	Next *string          `json:"next,omitempty"`
	Prev *string          `json:"prev,omitempty"`
}

// TimelinePoint defines model for TimelinePoint.
type TimelinePoint struct {
	At    *time.Time `json:"at,omitempty"`
	Value *int64     `json:"value,omitempty"`
}

// Timezones defines model for Timezones.
type Timezones struct {
	Timezone *[]string `json:"timezone,omitempty"`
}

// ChargerTimelineByPeriodParams defines parameters for ChargerTimelineByPeriod.
type ChargerTimelineByPeriodParams struct {
	// N Count of items to return
	N *int32 `form:"n,omitempty" json:"n,omitempty"`

	// Start Offset to start timeline from, in seconds from epoch
	Start *int64 `form:"start,omitempty" json:"start,omitempty"`
}

// PowerTimelineByPeriodParams defines parameters for PowerTimelineByPeriod.
type PowerTimelineByPeriodParams struct {
	// N Count of items to return
	N *int32 `form:"n,omitempty" json:"n,omitempty"`

	// Start Offset to start timeline from, in seconds from epoch
	Start *int64 `form:"start,omitempty" json:"start,omitempty"`
}

// AsOpenSchedule returns the union data inside the Schedule as a OpenSchedule
func (t Schedule) AsOpenSchedule() (OpenSchedule, error) {
	var body OpenSchedule
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOpenSchedule overwrites any union data inside the Schedule as the provided OpenSchedule
func (t *Schedule) FromOpenSchedule(v OpenSchedule) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOpenSchedule performs a merge with any union data inside the Schedule, using the provided OpenSchedule
func (t *Schedule) MergeOpenSchedule(v OpenSchedule) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRestrictedSchedule returns the union data inside the Schedule as a RestrictedSchedule
func (t Schedule) AsRestrictedSchedule() (RestrictedSchedule, error) {
	var body RestrictedSchedule
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRestrictedSchedule overwrites any union data inside the Schedule as the provided RestrictedSchedule
func (t *Schedule) FromRestrictedSchedule(v RestrictedSchedule) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRestrictedSchedule performs a merge with any union data inside the Schedule, using the provided RestrictedSchedule
func (t *Schedule) MergeRestrictedSchedule(v RestrictedSchedule) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Schedule) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Schedule) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ChargerSetOwnerByToken request
	ChargerSetOwnerByToken(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChargerTimelineByPeriod request
	ChargerTimelineByPeriod(ctx context.Context, id int64, period string, params *ChargerTimelineByPeriodParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChargerGetBrightness request
	ChargerGetBrightness(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChargerSetBrightness request
	ChargerSetBrightness(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostChargerByIdIdMmsAllow request
	PostChargerByIdIdMmsAllow(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostChargerByIdIdMmsForbid request
	PostChargerByIdIdMmsForbid(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PowerTimelineByPeriod request
	PowerTimelineByPeriod(ctx context.Context, id int64, period string, params *PowerTimelineByPeriodParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChargerScheduleById request
	ChargerScheduleById(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChargerByIdIdTariff request
	GetChargerByIdIdTariff(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutChargerByIdIdTariff request
	PutChargerByIdIdTariff(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostChargerByIdIdUnbindPlacementId request
	PostChargerByIdIdUnbindPlacementId(ctx context.Context, id int64, placementId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChargerGetByMac request
	ChargerGetByMac(ctx context.Context, mac string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChargerListByOwner request
	ChargerListByOwner(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCurrencies request
	GetCurrencies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlacements request
	GetPlacements(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTimezones request
	GetTimezones(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ChargerSetOwnerByToken(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChargerSetOwnerByTokenRequest(c.Server, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChargerTimelineByPeriod(ctx context.Context, id int64, period string, params *ChargerTimelineByPeriodParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChargerTimelineByPeriodRequest(c.Server, id, period, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChargerGetBrightness(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChargerGetBrightnessRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChargerSetBrightness(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChargerSetBrightnessRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChargerByIdIdMmsAllow(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChargerByIdIdMmsAllowRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChargerByIdIdMmsForbid(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChargerByIdIdMmsForbidRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PowerTimelineByPeriod(ctx context.Context, id int64, period string, params *PowerTimelineByPeriodParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPowerTimelineByPeriodRequest(c.Server, id, period, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChargerScheduleById(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChargerScheduleByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChargerByIdIdTariff(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChargerByIdIdTariffRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChargerByIdIdTariff(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChargerByIdIdTariffRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChargerByIdIdUnbindPlacementId(ctx context.Context, id int64, placementId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChargerByIdIdUnbindPlacementIdRequest(c.Server, id, placementId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChargerGetByMac(ctx context.Context, mac string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChargerGetByMacRequest(c.Server, mac)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChargerListByOwner(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChargerListByOwnerRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCurrencies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCurrenciesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlacements(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlacementsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTimezones(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTimezonesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewChargerSetOwnerByTokenRequest generates requests for ChargerSetOwnerByToken
func NewChargerSetOwnerByTokenRequest(server string, token string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/charger/by-adoption-token/%s/owner", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChargerTimelineByPeriodRequest generates requests for ChargerTimelineByPeriod
func NewChargerTimelineByPeriodRequest(server string, id int64, period string, params *ChargerTimelineByPeriodParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "period", runtime.ParamLocationPath, period)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/charger/by-id/%s/charging-timeline/by-period/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.N != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "n", runtime.ParamLocationQuery, *params.N); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChargerGetBrightnessRequest generates requests for ChargerGetBrightness
func NewChargerGetBrightnessRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/charger/by-id/%s/led/brightness", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChargerSetBrightnessRequest generates requests for ChargerSetBrightness
func NewChargerSetBrightnessRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/charger/by-id/%s/led/brightness", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostChargerByIdIdMmsAllowRequest generates requests for PostChargerByIdIdMmsAllow
func NewPostChargerByIdIdMmsAllowRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/charger/by-id/%s/mms/allow", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostChargerByIdIdMmsForbidRequest generates requests for PostChargerByIdIdMmsForbid
func NewPostChargerByIdIdMmsForbidRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/charger/by-id/%s/mms/forbid", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPowerTimelineByPeriodRequest generates requests for PowerTimelineByPeriod
func NewPowerTimelineByPeriodRequest(server string, id int64, period string, params *PowerTimelineByPeriodParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "period", runtime.ParamLocationPath, period)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/charger/by-id/%s/power-timeline/by-period/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.N != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "n", runtime.ParamLocationQuery, *params.N); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChargerScheduleByIdRequest generates requests for ChargerScheduleById
func NewChargerScheduleByIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/charger/by-id/%s/schedule", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChargerByIdIdTariffRequest generates requests for GetChargerByIdIdTariff
func NewGetChargerByIdIdTariffRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/charger/by-id/%s/tariff", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutChargerByIdIdTariffRequest generates requests for PutChargerByIdIdTariff
func NewPutChargerByIdIdTariffRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/charger/by-id/%s/tariff", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostChargerByIdIdUnbindPlacementIdRequest generates requests for PostChargerByIdIdUnbindPlacementId
func NewPostChargerByIdIdUnbindPlacementIdRequest(server string, id int64, placementId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "placementId", runtime.ParamLocationPath, placementId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/charger/by-id/%s/unbind/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChargerGetByMacRequest generates requests for ChargerGetByMac
func NewChargerGetByMacRequest(server string, mac string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mac", runtime.ParamLocationPath, mac)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/charger/by-mac/%s/device-id", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChargerListByOwnerRequest generates requests for ChargerListByOwner
func NewChargerListByOwnerRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/charger/by-owner")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCurrenciesRequest generates requests for GetCurrencies
func NewGetCurrenciesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/currencies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlacementsRequest generates requests for GetPlacements
func NewGetPlacementsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/placements")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTimezonesRequest generates requests for GetTimezones
func NewGetTimezonesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/timezones")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ChargerSetOwnerByTokenWithResponse request
	ChargerSetOwnerByTokenWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*ChargerSetOwnerByTokenResponse, error)

	// ChargerTimelineByPeriodWithResponse request
	ChargerTimelineByPeriodWithResponse(ctx context.Context, id int64, period string, params *ChargerTimelineByPeriodParams, reqEditors ...RequestEditorFn) (*ChargerTimelineByPeriodResponse, error)

	// ChargerGetBrightnessWithResponse request
	ChargerGetBrightnessWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*ChargerGetBrightnessResponse, error)

	// ChargerSetBrightnessWithResponse request
	ChargerSetBrightnessWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*ChargerSetBrightnessResponse, error)

	// PostChargerByIdIdMmsAllowWithResponse request
	PostChargerByIdIdMmsAllowWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*PostChargerByIdIdMmsAllowResponse, error)

	// PostChargerByIdIdMmsForbidWithResponse request
	PostChargerByIdIdMmsForbidWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*PostChargerByIdIdMmsForbidResponse, error)

	// PowerTimelineByPeriodWithResponse request
	PowerTimelineByPeriodWithResponse(ctx context.Context, id int64, period string, params *PowerTimelineByPeriodParams, reqEditors ...RequestEditorFn) (*PowerTimelineByPeriodResponse, error)

	// ChargerScheduleByIdWithResponse request
	ChargerScheduleByIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*ChargerScheduleByIdResponse, error)

	// GetChargerByIdIdTariffWithResponse request
	GetChargerByIdIdTariffWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetChargerByIdIdTariffResponse, error)

	// PutChargerByIdIdTariffWithResponse request
	PutChargerByIdIdTariffWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*PutChargerByIdIdTariffResponse, error)

	// PostChargerByIdIdUnbindPlacementIdWithResponse request
	PostChargerByIdIdUnbindPlacementIdWithResponse(ctx context.Context, id int64, placementId openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostChargerByIdIdUnbindPlacementIdResponse, error)

	// ChargerGetByMacWithResponse request
	ChargerGetByMacWithResponse(ctx context.Context, mac string, reqEditors ...RequestEditorFn) (*ChargerGetByMacResponse, error)

	// ChargerListByOwnerWithResponse request
	ChargerListByOwnerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ChargerListByOwnerResponse, error)

	// GetCurrenciesWithResponse request
	GetCurrenciesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCurrenciesResponse, error)

	// GetPlacementsWithResponse request
	GetPlacementsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPlacementsResponse, error)

	// GetTimezonesWithResponse request
	GetTimezonesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTimezonesResponse, error)
}

type ChargerSetOwnerByTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChargerSetOwnerByTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChargerSetOwnerByTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChargerTimelineByPeriodResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TimelinePage
}

// Status returns HTTPResponse.Status
func (r ChargerTimelineByPeriodResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChargerTimelineByPeriodResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChargerGetBrightnessResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Brightness
}

// Status returns HTTPResponse.Status
func (r ChargerGetBrightnessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChargerGetBrightnessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChargerSetBrightnessResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChargerSetBrightnessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChargerSetBrightnessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostChargerByIdIdMmsAllowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostChargerByIdIdMmsAllowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostChargerByIdIdMmsAllowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostChargerByIdIdMmsForbidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostChargerByIdIdMmsForbidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostChargerByIdIdMmsForbidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PowerTimelineByPeriodResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TimelinePage
}

// Status returns HTTPResponse.Status
func (r PowerTimelineByPeriodResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PowerTimelineByPeriodResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChargerScheduleByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Schedule
}

// Status returns HTTPResponse.Status
func (r ChargerScheduleByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChargerScheduleByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChargerByIdIdTariffResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tariff
}

// Status returns HTTPResponse.Status
func (r GetChargerByIdIdTariffResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChargerByIdIdTariffResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutChargerByIdIdTariffResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutChargerByIdIdTariffResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutChargerByIdIdTariffResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostChargerByIdIdUnbindPlacementIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostChargerByIdIdUnbindPlacementIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostChargerByIdIdUnbindPlacementIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChargerGetByMacResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChargerGetByMacResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChargerGetByMacResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChargerListByOwnerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdoptedChargers
}

// Status returns HTTPResponse.Status
func (r ChargerListByOwnerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChargerListByOwnerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCurrenciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Currencies
}

// Status returns HTTPResponse.Status
func (r GetCurrenciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCurrenciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlacementsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Placements
}

// Status returns HTTPResponse.Status
func (r GetPlacementsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlacementsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTimezonesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Timezones
}

// Status returns HTTPResponse.Status
func (r GetTimezonesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTimezonesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ChargerSetOwnerByTokenWithResponse request returning *ChargerSetOwnerByTokenResponse
func (c *ClientWithResponses) ChargerSetOwnerByTokenWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*ChargerSetOwnerByTokenResponse, error) {
	rsp, err := c.ChargerSetOwnerByToken(ctx, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChargerSetOwnerByTokenResponse(rsp)
}

// ChargerTimelineByPeriodWithResponse request returning *ChargerTimelineByPeriodResponse
func (c *ClientWithResponses) ChargerTimelineByPeriodWithResponse(ctx context.Context, id int64, period string, params *ChargerTimelineByPeriodParams, reqEditors ...RequestEditorFn) (*ChargerTimelineByPeriodResponse, error) {
	rsp, err := c.ChargerTimelineByPeriod(ctx, id, period, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChargerTimelineByPeriodResponse(rsp)
}

// ChargerGetBrightnessWithResponse request returning *ChargerGetBrightnessResponse
func (c *ClientWithResponses) ChargerGetBrightnessWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*ChargerGetBrightnessResponse, error) {
	rsp, err := c.ChargerGetBrightness(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChargerGetBrightnessResponse(rsp)
}

// ChargerSetBrightnessWithResponse request returning *ChargerSetBrightnessResponse
func (c *ClientWithResponses) ChargerSetBrightnessWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*ChargerSetBrightnessResponse, error) {
	rsp, err := c.ChargerSetBrightness(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChargerSetBrightnessResponse(rsp)
}

// PostChargerByIdIdMmsAllowWithResponse request returning *PostChargerByIdIdMmsAllowResponse
func (c *ClientWithResponses) PostChargerByIdIdMmsAllowWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*PostChargerByIdIdMmsAllowResponse, error) {
	rsp, err := c.PostChargerByIdIdMmsAllow(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChargerByIdIdMmsAllowResponse(rsp)
}

// PostChargerByIdIdMmsForbidWithResponse request returning *PostChargerByIdIdMmsForbidResponse
func (c *ClientWithResponses) PostChargerByIdIdMmsForbidWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*PostChargerByIdIdMmsForbidResponse, error) {
	rsp, err := c.PostChargerByIdIdMmsForbid(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChargerByIdIdMmsForbidResponse(rsp)
}

// PowerTimelineByPeriodWithResponse request returning *PowerTimelineByPeriodResponse
func (c *ClientWithResponses) PowerTimelineByPeriodWithResponse(ctx context.Context, id int64, period string, params *PowerTimelineByPeriodParams, reqEditors ...RequestEditorFn) (*PowerTimelineByPeriodResponse, error) {
	rsp, err := c.PowerTimelineByPeriod(ctx, id, period, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePowerTimelineByPeriodResponse(rsp)
}

// ChargerScheduleByIdWithResponse request returning *ChargerScheduleByIdResponse
func (c *ClientWithResponses) ChargerScheduleByIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*ChargerScheduleByIdResponse, error) {
	rsp, err := c.ChargerScheduleById(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChargerScheduleByIdResponse(rsp)
}

// GetChargerByIdIdTariffWithResponse request returning *GetChargerByIdIdTariffResponse
func (c *ClientWithResponses) GetChargerByIdIdTariffWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetChargerByIdIdTariffResponse, error) {
	rsp, err := c.GetChargerByIdIdTariff(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChargerByIdIdTariffResponse(rsp)
}

// PutChargerByIdIdTariffWithResponse request returning *PutChargerByIdIdTariffResponse
func (c *ClientWithResponses) PutChargerByIdIdTariffWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*PutChargerByIdIdTariffResponse, error) {
	rsp, err := c.PutChargerByIdIdTariff(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChargerByIdIdTariffResponse(rsp)
}

// PostChargerByIdIdUnbindPlacementIdWithResponse request returning *PostChargerByIdIdUnbindPlacementIdResponse
func (c *ClientWithResponses) PostChargerByIdIdUnbindPlacementIdWithResponse(ctx context.Context, id int64, placementId openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostChargerByIdIdUnbindPlacementIdResponse, error) {
	rsp, err := c.PostChargerByIdIdUnbindPlacementId(ctx, id, placementId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChargerByIdIdUnbindPlacementIdResponse(rsp)
}

// ChargerGetByMacWithResponse request returning *ChargerGetByMacResponse
func (c *ClientWithResponses) ChargerGetByMacWithResponse(ctx context.Context, mac string, reqEditors ...RequestEditorFn) (*ChargerGetByMacResponse, error) {
	rsp, err := c.ChargerGetByMac(ctx, mac, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChargerGetByMacResponse(rsp)
}

// ChargerListByOwnerWithResponse request returning *ChargerListByOwnerResponse
func (c *ClientWithResponses) ChargerListByOwnerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ChargerListByOwnerResponse, error) {
	rsp, err := c.ChargerListByOwner(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChargerListByOwnerResponse(rsp)
}

// GetCurrenciesWithResponse request returning *GetCurrenciesResponse
func (c *ClientWithResponses) GetCurrenciesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCurrenciesResponse, error) {
	rsp, err := c.GetCurrencies(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCurrenciesResponse(rsp)
}

// GetPlacementsWithResponse request returning *GetPlacementsResponse
func (c *ClientWithResponses) GetPlacementsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPlacementsResponse, error) {
	rsp, err := c.GetPlacements(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlacementsResponse(rsp)
}

// GetTimezonesWithResponse request returning *GetTimezonesResponse
func (c *ClientWithResponses) GetTimezonesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTimezonesResponse, error) {
	rsp, err := c.GetTimezones(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTimezonesResponse(rsp)
}

// ParseChargerSetOwnerByTokenResponse parses an HTTP response from a ChargerSetOwnerByTokenWithResponse call
func ParseChargerSetOwnerByTokenResponse(rsp *http.Response) (*ChargerSetOwnerByTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChargerSetOwnerByTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseChargerTimelineByPeriodResponse parses an HTTP response from a ChargerTimelineByPeriodWithResponse call
func ParseChargerTimelineByPeriodResponse(rsp *http.Response) (*ChargerTimelineByPeriodResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChargerTimelineByPeriodResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TimelinePage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChargerGetBrightnessResponse parses an HTTP response from a ChargerGetBrightnessWithResponse call
func ParseChargerGetBrightnessResponse(rsp *http.Response) (*ChargerGetBrightnessResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChargerGetBrightnessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Brightness
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChargerSetBrightnessResponse parses an HTTP response from a ChargerSetBrightnessWithResponse call
func ParseChargerSetBrightnessResponse(rsp *http.Response) (*ChargerSetBrightnessResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChargerSetBrightnessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostChargerByIdIdMmsAllowResponse parses an HTTP response from a PostChargerByIdIdMmsAllowWithResponse call
func ParsePostChargerByIdIdMmsAllowResponse(rsp *http.Response) (*PostChargerByIdIdMmsAllowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostChargerByIdIdMmsAllowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostChargerByIdIdMmsForbidResponse parses an HTTP response from a PostChargerByIdIdMmsForbidWithResponse call
func ParsePostChargerByIdIdMmsForbidResponse(rsp *http.Response) (*PostChargerByIdIdMmsForbidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostChargerByIdIdMmsForbidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePowerTimelineByPeriodResponse parses an HTTP response from a PowerTimelineByPeriodWithResponse call
func ParsePowerTimelineByPeriodResponse(rsp *http.Response) (*PowerTimelineByPeriodResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PowerTimelineByPeriodResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TimelinePage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChargerScheduleByIdResponse parses an HTTP response from a ChargerScheduleByIdWithResponse call
func ParseChargerScheduleByIdResponse(rsp *http.Response) (*ChargerScheduleByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChargerScheduleByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Schedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChargerByIdIdTariffResponse parses an HTTP response from a GetChargerByIdIdTariffWithResponse call
func ParseGetChargerByIdIdTariffResponse(rsp *http.Response) (*GetChargerByIdIdTariffResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChargerByIdIdTariffResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tariff
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutChargerByIdIdTariffResponse parses an HTTP response from a PutChargerByIdIdTariffWithResponse call
func ParsePutChargerByIdIdTariffResponse(rsp *http.Response) (*PutChargerByIdIdTariffResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutChargerByIdIdTariffResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostChargerByIdIdUnbindPlacementIdResponse parses an HTTP response from a PostChargerByIdIdUnbindPlacementIdWithResponse call
func ParsePostChargerByIdIdUnbindPlacementIdResponse(rsp *http.Response) (*PostChargerByIdIdUnbindPlacementIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostChargerByIdIdUnbindPlacementIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseChargerGetByMacResponse parses an HTTP response from a ChargerGetByMacWithResponse call
func ParseChargerGetByMacResponse(rsp *http.Response) (*ChargerGetByMacResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChargerGetByMacResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseChargerListByOwnerResponse parses an HTTP response from a ChargerListByOwnerWithResponse call
func ParseChargerListByOwnerResponse(rsp *http.Response) (*ChargerListByOwnerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChargerListByOwnerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdoptedChargers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCurrenciesResponse parses an HTTP response from a GetCurrenciesWithResponse call
func ParseGetCurrenciesResponse(rsp *http.Response) (*GetCurrenciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCurrenciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Currencies
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPlacementsResponse parses an HTTP response from a GetPlacementsWithResponse call
func ParseGetPlacementsResponse(rsp *http.Response) (*GetPlacementsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlacementsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Placements
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTimezonesResponse parses an HTTP response from a GetTimezonesWithResponse call
func ParseGetTimezonesResponse(rsp *http.Response) (*GetTimezonesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTimezonesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Timezones
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
